[
    {
        "label": "streamlit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "streamlit",
        "description": "streamlit",
        "detail": "streamlit",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "yfinance",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "yfinance",
        "description": "yfinance",
        "detail": "yfinance",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "plotly.graph_objects",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "plotly.graph_objects",
        "description": "plotly.graph_objects",
        "detail": "plotly.graph_objects",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "norm",
        "importPath": "scipy.stats",
        "description": "scipy.stats",
        "isExtraImport": true,
        "detail": "scipy.stats",
        "documentation": {}
    },
    {
        "label": "fetch_stock_data",
        "kind": 2,
        "importPath": "streamlit_stockPredictor",
        "description": "streamlit_stockPredictor",
        "peekOfCode": "def fetch_stock_data(ticker, start_date, end_date):\n    stock = yf.Ticker(ticker)\n    df = stock.history(start=start_date, end=end_date)\n    return df, stock\ndef calculate_technical_indicators(df):\n    df['SMA20'] = df['Close'].rolling(window=20).mean()\n    df['SMA50'] = df['Close'].rolling(window=50).mean()\n    df['Daily_Return'] = df['Close'].pct_change()\n    df['Volatility'] = df['Daily_Return'].rolling(window=20).std() * np.sqrt(252)\n    return df",
        "detail": "streamlit_stockPredictor",
        "documentation": {}
    },
    {
        "label": "calculate_technical_indicators",
        "kind": 2,
        "importPath": "streamlit_stockPredictor",
        "description": "streamlit_stockPredictor",
        "peekOfCode": "def calculate_technical_indicators(df):\n    df['SMA20'] = df['Close'].rolling(window=20).mean()\n    df['SMA50'] = df['Close'].rolling(window=50).mean()\n    df['Daily_Return'] = df['Close'].pct_change()\n    df['Volatility'] = df['Daily_Return'].rolling(window=20).std() * np.sqrt(252)\n    return df\ndef predict_future_prices(df, days=30):\n    X = np.array(range(len(df))).reshape(-1, 1)\n    y = df['Close'].values\n    model = LinearRegression()",
        "detail": "streamlit_stockPredictor",
        "documentation": {}
    },
    {
        "label": "predict_future_prices",
        "kind": 2,
        "importPath": "streamlit_stockPredictor",
        "description": "streamlit_stockPredictor",
        "peekOfCode": "def predict_future_prices(df, days=30):\n    X = np.array(range(len(df))).reshape(-1, 1)\n    y = df['Close'].values\n    model = LinearRegression()\n    model.fit(X, y)\n    last_date = df.index[-1]\n    future_dates = pd.date_range(start=last_date + timedelta(days=1), periods=days)\n    future_X = np.array(range(len(df), len(df) + days)).reshape(-1, 1)\n    future_prices = model.predict(future_X)\n    future_df = pd.DataFrame({",
        "detail": "streamlit_stockPredictor",
        "documentation": {}
    },
    {
        "label": "plot_stock_data_with_predictions",
        "kind": 2,
        "importPath": "streamlit_stockPredictor",
        "description": "streamlit_stockPredictor",
        "peekOfCode": "def plot_stock_data_with_predictions(df, future_df):\n    fig = go.Figure()\n    fig.add_trace(go.Candlestick(x=df.index, open=df['Open'], high=df['High'], low=df['Low'], close=df['Close'], name='OHLC'))\n    fig.add_trace(go.Scatter(x=df.index, y=df['SMA20'], name='SMA20'))\n    fig.add_trace(go.Scatter(x=df.index, y=df['SMA50'], name='SMA50'))\n    fig.add_trace(go.Scatter(x=future_df.index, y=future_df['Predicted_Close'], name='Predictions', line=dict(color='red', dash='dash')))\n    fig.update_layout(title='Stock Price, Moving Averages, and Predictions', xaxis_title='Date', yaxis_title='Price')\n    return fig\ndef calculate_volatility(df):\n    return df['Volatility'].iloc[-1]",
        "detail": "streamlit_stockPredictor",
        "documentation": {}
    },
    {
        "label": "calculate_volatility",
        "kind": 2,
        "importPath": "streamlit_stockPredictor",
        "description": "streamlit_stockPredictor",
        "peekOfCode": "def calculate_volatility(df):\n    return df['Volatility'].iloc[-1]\ndef predict_price_change(df, days):\n    current_price = df['Close'].iloc[-1]\n    predicted_price = predict_future_prices(df, days)['Predicted_Close'].iloc[-1]\n    percentage_change = ((predicted_price - current_price) / current_price) * 100\n    return percentage_change\ndef analyze_company_future(stock):\n    info = stock.info\n    outlook = \"The company's future looks \"",
        "detail": "streamlit_stockPredictor",
        "documentation": {}
    },
    {
        "label": "predict_price_change",
        "kind": 2,
        "importPath": "streamlit_stockPredictor",
        "description": "streamlit_stockPredictor",
        "peekOfCode": "def predict_price_change(df, days):\n    current_price = df['Close'].iloc[-1]\n    predicted_price = predict_future_prices(df, days)['Predicted_Close'].iloc[-1]\n    percentage_change = ((predicted_price - current_price) / current_price) * 100\n    return percentage_change\ndef analyze_company_future(stock):\n    info = stock.info\n    outlook = \"The company's future looks \"\n    if info['recommendationKey'] in ['buy', 'strongBuy']:\n        outlook += \"promising. Analysts recommend buying the stock. \"",
        "detail": "streamlit_stockPredictor",
        "documentation": {}
    },
    {
        "label": "analyze_company_future",
        "kind": 2,
        "importPath": "streamlit_stockPredictor",
        "description": "streamlit_stockPredictor",
        "peekOfCode": "def analyze_company_future(stock):\n    info = stock.info\n    outlook = \"The company's future looks \"\n    if info['recommendationKey'] in ['buy', 'strongBuy']:\n        outlook += \"promising. Analysts recommend buying the stock. \"\n    elif info['recommendationKey'] in ['sell', 'strongSell']:\n        outlook += \"challenging. Analysts recommend selling the stock. \"\n    else:\n        outlook += \"stable. Analysts recommend holding the stock. \"\n    outlook += f\"The company has a market cap of ${info['marketCap']:,} and a P/E ratio of {info.get('trailingPE', 'N/A')}. \"",
        "detail": "streamlit_stockPredictor",
        "documentation": {}
    },
    {
        "label": "analyze_competition",
        "kind": 2,
        "importPath": "streamlit_stockPredictor",
        "description": "streamlit_stockPredictor",
        "peekOfCode": "def analyze_competition(stock):\n    info = stock.info\n    sector = info['sector']\n    industry = info['industry']\n    competition = f\"The company operates in the {sector} sector, specifically in the {industry} industry. \"\n    if 'companyOfficers' in info:\n        competition += f\"It has {len(info['companyOfficers'])} key executives. \"\n    if 'fullTimeEmployees' in info:\n        competition += f\"The company has {info['fullTimeEmployees']:,} full-time employees. \"\n    competition += \"Competition level is considered \"",
        "detail": "streamlit_stockPredictor",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "streamlit_stockPredictor",
        "description": "streamlit_stockPredictor",
        "peekOfCode": "def main():\n    st.title('Advanced Stock Analysis and Prediction')\n    ticker = st.sidebar.text_input('Stock Ticker', value='AAPL')\n    start_date = st.sidebar.date_input('Start Date', datetime.now() - timedelta(days=365))\n    end_date = st.sidebar.date_input('End Date', datetime.now())\n    df, stock = fetch_stock_data(ticker, start_date, end_date)\n    df = calculate_technical_indicators(df)\n    future_df = predict_future_prices(df)\n    st.subheader('Stock Data')\n    st.dataframe(df.tail())",
        "detail": "streamlit_stockPredictor",
        "documentation": {}
    }
]