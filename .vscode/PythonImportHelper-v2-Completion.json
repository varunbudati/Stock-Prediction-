[
    {
        "label": "streamlit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "streamlit",
        "description": "streamlit",
        "detail": "streamlit",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "plotly.graph_objects",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "plotly.graph_objects",
        "description": "plotly.graph_objects",
        "detail": "plotly.graph_objects",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "generate_mock_stock_data",
        "kind": 2,
        "importPath": "streamlit_stockPredictor",
        "description": "streamlit_stockPredictor",
        "peekOfCode": "def generate_mock_stock_data(ticker, start_date, end_date):\n    date_range = pd.date_range(start=start_date, end=end_date)\n    close_prices = [100]  # Start with a base price of 100\n    for _ in range(1, len(date_range)):\n        change = random.uniform(-2, 2)  # Random daily change between -2% and 2%\n        close_prices.append(close_prices[-1] * (1 + change/100))\n    data = {\n        'Date': date_range,\n        'Open': close_prices,\n        'High': [price * random.uniform(1, 1.02) for price in close_prices],",
        "detail": "streamlit_stockPredictor",
        "documentation": {}
    },
    {
        "label": "calculate_technical_indicators",
        "kind": 2,
        "importPath": "streamlit_stockPredictor",
        "description": "streamlit_stockPredictor",
        "peekOfCode": "def calculate_technical_indicators(df):\n    df['SMA20'] = df['Close'].rolling(window=20).mean()\n    df['SMA50'] = df['Close'].rolling(window=50).mean()\n    return df\ndef predict_future_prices(df, days=30):\n    last_date = df.index[-1]\n    future_dates = pd.date_range(start=last_date + timedelta(days=1), periods=days)\n    predictions = []\n    current_price = df['Close'].iloc[-1]\n    sma20 = df['SMA20'].iloc[-1]",
        "detail": "streamlit_stockPredictor",
        "documentation": {}
    },
    {
        "label": "predict_future_prices",
        "kind": 2,
        "importPath": "streamlit_stockPredictor",
        "description": "streamlit_stockPredictor",
        "peekOfCode": "def predict_future_prices(df, days=30):\n    last_date = df.index[-1]\n    future_dates = pd.date_range(start=last_date + timedelta(days=1), periods=days)\n    predictions = []\n    current_price = df['Close'].iloc[-1]\n    sma20 = df['SMA20'].iloc[-1]\n    sma50 = df['SMA50'].iloc[-1]\n    for _ in range(days):\n        if sma20 > sma50:\n            prediction = current_price * 1.01  # Predict 1% increase",
        "detail": "streamlit_stockPredictor",
        "documentation": {}
    },
    {
        "label": "plot_stock_data_with_predictions",
        "kind": 2,
        "importPath": "streamlit_stockPredictor",
        "description": "streamlit_stockPredictor",
        "peekOfCode": "def plot_stock_data_with_predictions(df, future_df):\n    fig = go.Figure()\n    # Plot historical data\n    fig.add_trace(go.Candlestick(x=df.index, open=df['Open'], high=df['High'], low=df['Low'], close=df['Close'], name='OHLC'))\n    fig.add_trace(go.Scatter(x=df.index, y=df['SMA20'], name='SMA20'))\n    fig.add_trace(go.Scatter(x=df.index, y=df['SMA50'], name='SMA50'))\n    # Plot predictions\n    fig.add_trace(go.Scatter(x=future_df.index, y=future_df['Predicted_Close'], name='Predictions', line=dict(color='red', dash='dash')))\n    fig.update_layout(title='Stock Price, Moving Averages, and Predictions', xaxis_title='Date', yaxis_title='Price')\n    return fig",
        "detail": "streamlit_stockPredictor",
        "documentation": {}
    },
    {
        "label": "generate_mock_news",
        "kind": 2,
        "importPath": "streamlit_stockPredictor",
        "description": "streamlit_stockPredictor",
        "peekOfCode": "def generate_mock_news(ticker):\n    news_templates = [\n        f\"{ticker} stock sees unexpected surge\",\n        f\"Analysts predict bright future for {ticker}\",\n        f\"{ticker} announces new product line\",\n        f\"Market uncertainty affects {ticker} performance\",\n        f\"{ticker} reports quarterly earnings\"\n    ]\n    return [{'title': random.choice(news_templates)} for _ in range(5)]\ndef simple_sentiment_analysis(text):",
        "detail": "streamlit_stockPredictor",
        "documentation": {}
    },
    {
        "label": "simple_sentiment_analysis",
        "kind": 2,
        "importPath": "streamlit_stockPredictor",
        "description": "streamlit_stockPredictor",
        "peekOfCode": "def simple_sentiment_analysis(text):\n    positive_words = ['surge', 'bright', 'new', 'earnings']\n    negative_words = ['uncertainty', 'affects']\n    words = text.lower().split()\n    positive_count = sum(word in positive_words for word in words)\n    negative_count = sum(word in negative_words for word in words)\n    if positive_count > negative_count:\n        return 1\n    elif negative_count > positive_count:\n        return -1",
        "detail": "streamlit_stockPredictor",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "streamlit_stockPredictor",
        "description": "streamlit_stockPredictor",
        "peekOfCode": "def main():\n    st.title('Stock Analysis and Prediction (Mock Data)')\n    ticker = st.sidebar.text_input('Stock Ticker', value='MOCK')\n    start_date = st.sidebar.date_input('Start Date', datetime.now() - timedelta(days=365))\n    end_date = st.sidebar.date_input('End Date', datetime.now())\n    df = generate_mock_stock_data(ticker, start_date, end_date)\n    df = calculate_technical_indicators(df)\n    future_df = predict_future_prices(df)\n    st.subheader('Stock Data (Mock)')\n    st.dataframe(df.tail())",
        "detail": "streamlit_stockPredictor",
        "documentation": {}
    }
]